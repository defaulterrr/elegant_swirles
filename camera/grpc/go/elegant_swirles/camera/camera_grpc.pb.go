// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package camera

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CameraClient interface {
	GetCameraMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Camera_GetCameraMetricsClient, error)
}

type cameraClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraClient(cc grpc.ClientConnInterface) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) GetCameraMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Camera_GetCameraMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Camera_ServiceDesc.Streams[0], "/elegant_swirles.camera.v1.Camera/GetCameraMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraGetCameraMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Camera_GetCameraMetricsClient interface {
	Recv() (*CameraMetrics, error)
	grpc.ClientStream
}

type cameraGetCameraMetricsClient struct {
	grpc.ClientStream
}

func (x *cameraGetCameraMetricsClient) Recv() (*CameraMetrics, error) {
	m := new(CameraMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CameraServer is the server API for Camera service.
// All implementations must embed UnimplementedCameraServer
// for forward compatibility
type CameraServer interface {
	GetCameraMetrics(*emptypb.Empty, Camera_GetCameraMetricsServer) error
	mustEmbedUnimplementedCameraServer()
}

// UnimplementedCameraServer must be embedded to have forward compatible implementations.
type UnimplementedCameraServer struct {
}

func (UnimplementedCameraServer) GetCameraMetrics(*emptypb.Empty, Camera_GetCameraMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCameraMetrics not implemented")
}
func (UnimplementedCameraServer) mustEmbedUnimplementedCameraServer() {}

// UnsafeCameraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraServer will
// result in compilation errors.
type UnsafeCameraServer interface {
	mustEmbedUnimplementedCameraServer()
}

func RegisterCameraServer(s grpc.ServiceRegistrar, srv CameraServer) {
	s.RegisterService(&Camera_ServiceDesc, srv)
}

func _Camera_GetCameraMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServer).GetCameraMetrics(m, &cameraGetCameraMetricsServer{stream})
}

type Camera_GetCameraMetricsServer interface {
	Send(*CameraMetrics) error
	grpc.ServerStream
}

type cameraGetCameraMetricsServer struct {
	grpc.ServerStream
}

func (x *cameraGetCameraMetricsServer) Send(m *CameraMetrics) error {
	return x.ServerStream.SendMsg(m)
}

// Camera_ServiceDesc is the grpc.ServiceDesc for Camera service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Camera_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elegant_swirles.camera.v1.Camera",
	HandlerType: (*CameraServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCameraMetrics",
			Handler:       _Camera_GetCameraMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "elegant_swirles/camera/v1/camera.proto",
}
