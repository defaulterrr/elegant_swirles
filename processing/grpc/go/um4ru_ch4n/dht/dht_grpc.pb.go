// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dht

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DHTClient is the client API for DHT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHTClient interface {
	GetDHTMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DHT_GetDHTMetricsClient, error)
}

type dHTClient struct {
	cc grpc.ClientConnInterface
}

func NewDHTClient(cc grpc.ClientConnInterface) DHTClient {
	return &dHTClient{cc}
}

func (c *dHTClient) GetDHTMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DHT_GetDHTMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DHT_ServiceDesc.Streams[0], "/um4ru_ch4n.dht.v1.DHT/GetDHTMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &dHTGetDHTMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DHT_GetDHTMetricsClient interface {
	Recv() (*Metrics, error)
	grpc.ClientStream
}

type dHTGetDHTMetricsClient struct {
	grpc.ClientStream
}

func (x *dHTGetDHTMetricsClient) Recv() (*Metrics, error) {
	m := new(Metrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DHTServer is the server API for DHT service.
// All implementations must embed UnimplementedDHTServer
// for forward compatibility
type DHTServer interface {
	GetDHTMetrics(*emptypb.Empty, DHT_GetDHTMetricsServer) error
	mustEmbedUnimplementedDHTServer()
}

// UnimplementedDHTServer must be embedded to have forward compatible implementations.
type UnimplementedDHTServer struct {
}

func (UnimplementedDHTServer) GetDHTMetrics(*emptypb.Empty, DHT_GetDHTMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDHTMetrics not implemented")
}
func (UnimplementedDHTServer) mustEmbedUnimplementedDHTServer() {}

// UnsafeDHTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHTServer will
// result in compilation errors.
type UnsafeDHTServer interface {
	mustEmbedUnimplementedDHTServer()
}

func RegisterDHTServer(s grpc.ServiceRegistrar, srv DHTServer) {
	s.RegisterService(&DHT_ServiceDesc, srv)
}

func _DHT_GetDHTMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DHTServer).GetDHTMetrics(m, &dHTGetDHTMetricsServer{stream})
}

type DHT_GetDHTMetricsServer interface {
	Send(*Metrics) error
	grpc.ServerStream
}

type dHTGetDHTMetricsServer struct {
	grpc.ServerStream
}

func (x *dHTGetDHTMetricsServer) Send(m *Metrics) error {
	return x.ServerStream.SendMsg(m)
}

// DHT_ServiceDesc is the grpc.ServiceDesc for DHT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "um4ru_ch4n.dht.v1.DHT",
	HandlerType: (*DHTServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDHTMetrics",
			Handler:       _DHT_GetDHTMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "um4ru_ch4n/dht/v1/dht.proto",
}
